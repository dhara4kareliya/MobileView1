{
  "version": 3,
  "sources": ["../../parseuri/index.js", "../../has-cors/index.js", "../../@socket.io/component-emitter/index.js", "../../yeast/index.js", "../../parseqs/index.js", "../../backo2/index.js", "../../socket.io-client/build/esm/url.js", "../../engine.io-client/build/esm/transports/xmlhttprequest.browser.js", "../../engine.io-client/build/esm/globalThis.browser.js", "../../engine.io-client/build/esm/util.js", "../../engine.io-client/build/esm/transports/polling-xhr.js", "../../engine.io-parser/build/esm/commons.js", "../../engine.io-parser/build/esm/encodePacket.browser.js", "../../src/index.ts", "../../engine.io-parser/build/esm/decodePacket.browser.js", "../../engine.io-parser/build/esm/index.js", "../../engine.io-client/build/esm/transport.js", "../../engine.io-client/build/esm/transports/polling.js", "../../engine.io-client/build/esm/transports/websocket.js", "../../engine.io-client/build/esm/transports/websocket-constructor.browser.js", "../../engine.io-client/build/esm/transports/index.js", "../../engine.io-client/build/esm/socket.js", "../../engine.io-client/build/esm/index.js", "../../socket.io-client/node_modules/socket.io-parser/build/esm/index.js", "../../socket.io-client/node_modules/socket.io-parser/build/esm/is-binary.js", "../../socket.io-client/node_modules/socket.io-parser/build/esm/binary.js", "../../socket.io-client/build/esm/on.js", "../../socket.io-client/build/esm/socket.js", "../../socket.io-client/build/esm/manager.js", "../../socket.io-client/build/esm/index.js", "dep:socket_io-client"],
  "sourcesContent": ["/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    uri.pathNames = pathNames(uri, uri['path']);\r\n    uri.queryKey = queryKey(uri, uri['query']);\r\n\r\n    return uri;\r\n};\r\n\r\nfunction pathNames(obj, path) {\r\n    var regx = /\\/{2,9}/g,\r\n        names = path.replace(regx, \"/\").split(\"/\");\r\n\r\n    if (path.substr(0, 1) == '/' || path.length === 0) {\r\n        names.splice(0, 1);\r\n    }\r\n    if (path.substr(path.length - 1, 1) == '/') {\r\n        names.splice(names.length - 1, 1);\r\n    }\r\n\r\n    return names;\r\n}\r\n\r\nfunction queryKey(uri, query) {\r\n    var data = {};\r\n\r\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\r\n        if ($1) {\r\n            data[$1] = $2;\r\n        }\r\n    });\r\n\r\n    return data;\r\n}\r\n", "\r\n/**\r\n * Module exports.\r\n *\r\n * Logic borrowed from Modernizr:\r\n *\r\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\r\n */\r\n\r\ntry {\r\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\r\n    'withCredentials' in new XMLHttpRequest();\r\n} catch (err) {\r\n  // if XMLHttp support is disabled in IE then it will throw\r\n  // when trying to create\r\n  module.exports = false;\r\n}\r\n", "\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nexports.Emitter = Emitter;\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n}\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n// alias used for reserved events (protected method)\r\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n", "'use strict';\r\n\r\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\r\n  , length = 64\r\n  , map = {}\r\n  , seed = 0\r\n  , i = 0\r\n  , prev;\r\n\r\n/**\r\n * Return a string representing the specified number.\r\n *\r\n * @param {Number} num The number to convert.\r\n * @returns {String} The string representation of the number.\r\n * @api public\r\n */\r\nfunction encode(num) {\r\n  var encoded = '';\r\n\r\n  do {\r\n    encoded = alphabet[num % length] + encoded;\r\n    num = Math.floor(num / length);\r\n  } while (num > 0);\r\n\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Return the integer value specified by the given string.\r\n *\r\n * @param {String} str The string to convert.\r\n * @returns {Number} The integer value represented by the string.\r\n * @api public\r\n */\r\nfunction decode(str) {\r\n  var decoded = 0;\r\n\r\n  for (i = 0; i < str.length; i++) {\r\n    decoded = decoded * length + map[str.charAt(i)];\r\n  }\r\n\r\n  return decoded;\r\n}\r\n\r\n/**\r\n * Yeast: A tiny growing id generator.\r\n *\r\n * @returns {String} A unique id.\r\n * @api public\r\n */\r\nfunction yeast() {\r\n  var now = encode(+new Date());\r\n\r\n  if (now !== prev) return seed = 0, prev = now;\r\n  return now +'.'+ encode(seed++);\r\n}\r\n\r\n//\r\n// Map each character to its index.\r\n//\r\nfor (; i < length; i++) map[alphabet[i]] = i;\r\n\r\n//\r\n// Expose the `yeast`, `encode` and `decode` functions.\r\n//\r\nyeast.encode = encode;\r\nyeast.decode = decode;\r\nmodule.exports = yeast;\r\n", "/**\r\n * Compiles a querystring\r\n * Returns string representation of the object\r\n *\r\n * @param {Object}\r\n * @api private\r\n */\r\n\r\nexports.encode = function (obj) {\r\n  var str = '';\r\n\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      if (str.length) str += '&';\r\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\r\n    }\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Parses a simple querystring into an object\r\n *\r\n * @param {String} qs\r\n * @api private\r\n */\r\n\r\nexports.decode = function(qs){\r\n  var qry = {};\r\n  var pairs = qs.split('&');\r\n  for (var i = 0, l = pairs.length; i < l; i++) {\r\n    var pair = pairs[i].split('=');\r\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n  }\r\n  return qry;\r\n};\r\n", "\r\n/**\r\n * Expose `Backoff`.\r\n */\r\n\r\nmodule.exports = Backoff;\r\n\r\n/**\r\n * Initialize backoff timer with `opts`.\r\n *\r\n * - `min` initial timeout in milliseconds [100]\r\n * - `max` max timeout [10000]\r\n * - `jitter` [0]\r\n * - `factor` [2]\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\r\n\r\nfunction Backoff(opts) {\r\n  opts = opts || {};\r\n  this.ms = opts.min || 100;\r\n  this.max = opts.max || 10000;\r\n  this.factor = opts.factor || 2;\r\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\r\n  this.attempts = 0;\r\n}\r\n\r\n/**\r\n * Return the backoff duration.\r\n *\r\n * @return {Number}\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.duration = function(){\r\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\r\n  if (this.jitter) {\r\n    var rand =  Math.random();\r\n    var deviation = Math.floor(rand * this.jitter * ms);\r\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\r\n  }\r\n  return Math.min(ms, this.max) | 0;\r\n};\r\n\r\n/**\r\n * Reset the number of attempts.\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.reset = function(){\r\n  this.attempts = 0;\r\n};\r\n\r\n/**\r\n * Set the minimum duration\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setMin = function(min){\r\n  this.ms = min;\r\n};\r\n\r\n/**\r\n * Set the maximum duration\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setMax = function(max){\r\n  this.max = max;\r\n};\r\n\r\n/**\r\n * Set the jitter\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setJitter = function(jitter){\r\n  this.jitter = jitter;\r\n};\r\n\r\n", "import parseuri from \"parseuri\";\r\n/**\r\n * URL parser.\r\n *\r\n * @param uri - url\r\n * @param path - the request path of the connection\r\n * @param loc - An object meant to mimic window.location.\r\n *        Defaults to window.location.\r\n * @public\r\n */\r\nexport function url(uri, path = \"\", loc) {\r\n    let obj = uri;\r\n    // default to window.location\r\n    loc = loc || (typeof location !== \"undefined\" && location);\r\n    if (null == uri)\r\n        uri = loc.protocol + \"//\" + loc.host;\r\n    // relative path support\r\n    if (typeof uri === \"string\") {\r\n        if (\"/\" === uri.charAt(0)) {\r\n            if (\"/\" === uri.charAt(1)) {\r\n                uri = loc.protocol + uri;\r\n            }\r\n            else {\r\n                uri = loc.host + uri;\r\n            }\r\n        }\r\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\r\n            if (\"undefined\" !== typeof loc) {\r\n                uri = loc.protocol + \"//\" + uri;\r\n            }\r\n            else {\r\n                uri = \"https://\" + uri;\r\n            }\r\n        }\r\n        // parse\r\n        obj = parseuri(uri);\r\n    }\r\n    // make sure we treat `localhost:80` and `localhost` equally\r\n    if (!obj.port) {\r\n        if (/^(http|ws)$/.test(obj.protocol)) {\r\n            obj.port = \"80\";\r\n        }\r\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\r\n            obj.port = \"443\";\r\n        }\r\n    }\r\n    obj.path = obj.path || \"/\";\r\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\r\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\r\n    // define unique id\r\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\r\n    // define href\r\n    obj.href =\r\n        obj.protocol +\r\n            \"://\" +\r\n            host +\r\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\r\n    return obj;\r\n}\r\n", "// browser shim for xmlhttprequest module\r\nimport hasCORS from \"has-cors\";\r\nimport globalThis from \"../globalThis.js\";\r\nexport default function (opts) {\r\n    const xdomain = opts.xdomain;\r\n    // XMLHttpRequest can be disabled on IE\r\n    try {\r\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\r\n            return new XMLHttpRequest();\r\n        }\r\n    }\r\n    catch (e) { }\r\n    if (!xdomain) {\r\n        try {\r\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\r\n        }\r\n        catch (e) { }\r\n    }\r\n}\r\n", "export default (() => {\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    else if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    else {\r\n        return Function(\"return this\")();\r\n    }\r\n})();\r\n", "import globalThis from \"./globalThis.js\";\r\nexport function pick(obj, ...attr) {\r\n    return attr.reduce((acc, k) => {\r\n        if (obj.hasOwnProperty(k)) {\r\n            acc[k] = obj[k];\r\n        }\r\n        return acc;\r\n    }, {});\r\n}\r\n// Keep a reference to the real timeout functions so they can be used when overridden\r\nconst NATIVE_SET_TIMEOUT = setTimeout;\r\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\r\nexport function installTimerFunctions(obj, opts) {\r\n    if (opts.useNativeTimers) {\r\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\r\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\r\n    }\r\n    else {\r\n        obj.setTimeoutFn = setTimeout.bind(globalThis);\r\n        obj.clearTimeoutFn = clearTimeout.bind(globalThis);\r\n    }\r\n}\r\n", "/* global attachEvent */\r\nimport XMLHttpRequest from \"./xmlhttprequest.js\";\r\nimport globalThis from \"../globalThis.js\";\r\nimport { installTimerFunctions, pick } from \"../util.js\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { Polling } from \"./polling.js\";\r\n/**\r\n * Empty function\r\n */\r\nfunction empty() { }\r\nconst hasXHR2 = (function () {\r\n    const xhr = new XMLHttpRequest({\r\n        xdomain: false\r\n    });\r\n    return null != xhr.responseType;\r\n})();\r\nexport class XHR extends Polling {\r\n    /**\r\n     * XHR Polling constructor.\r\n     *\r\n     * @param {Object} opts\r\n     * @api public\r\n     */\r\n    constructor(opts) {\r\n        super(opts);\r\n        if (typeof location !== \"undefined\") {\r\n            const isSSL = \"https:\" === location.protocol;\r\n            let port = location.port;\r\n            // some user agents have empty `location.port`\r\n            if (!port) {\r\n                port = isSSL ? \"443\" : \"80\";\r\n            }\r\n            this.xd =\r\n                (typeof location !== \"undefined\" &&\r\n                    opts.hostname !== location.hostname) ||\r\n                    port !== opts.port;\r\n            this.xs = opts.secure !== isSSL;\r\n        }\r\n        /**\r\n         * XHR supports binary\r\n         */\r\n        const forceBase64 = opts && opts.forceBase64;\r\n        this.supportsBinary = hasXHR2 && !forceBase64;\r\n    }\r\n    /**\r\n     * Creates a request.\r\n     *\r\n     * @param {String} method\r\n     * @api private\r\n     */\r\n    request(opts = {}) {\r\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\r\n        return new Request(this.uri(), opts);\r\n    }\r\n    /**\r\n     * Sends data.\r\n     *\r\n     * @param {String} data to send.\r\n     * @param {Function} called upon flush.\r\n     * @api private\r\n     */\r\n    doWrite(data, fn) {\r\n        const req = this.request({\r\n            method: \"POST\",\r\n            data: data\r\n        });\r\n        req.on(\"success\", fn);\r\n        req.on(\"error\", err => {\r\n            this.onError(\"xhr post error\", err);\r\n        });\r\n    }\r\n    /**\r\n     * Starts a poll cycle.\r\n     *\r\n     * @api private\r\n     */\r\n    doPoll() {\r\n        const req = this.request();\r\n        req.on(\"data\", this.onData.bind(this));\r\n        req.on(\"error\", err => {\r\n            this.onError(\"xhr poll error\", err);\r\n        });\r\n        this.pollXhr = req;\r\n    }\r\n}\r\nexport class Request extends Emitter {\r\n    /**\r\n     * Request constructor\r\n     *\r\n     * @param {Object} options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts) {\r\n        super();\r\n        installTimerFunctions(this, opts);\r\n        this.opts = opts;\r\n        this.method = opts.method || \"GET\";\r\n        this.uri = uri;\r\n        this.async = false !== opts.async;\r\n        this.data = undefined !== opts.data ? opts.data : null;\r\n        this.create();\r\n    }\r\n    /**\r\n     * Creates the XHR object and sends the request.\r\n     *\r\n     * @api private\r\n     */\r\n    create() {\r\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\r\n        opts.xdomain = !!this.opts.xd;\r\n        opts.xscheme = !!this.opts.xs;\r\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\r\n        try {\r\n            xhr.open(this.method, this.uri, this.async);\r\n            try {\r\n                if (this.opts.extraHeaders) {\r\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n                    for (let i in this.opts.extraHeaders) {\r\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\r\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            if (\"POST\" === this.method) {\r\n                try {\r\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n                catch (e) { }\r\n            }\r\n            try {\r\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\r\n            }\r\n            catch (e) { }\r\n            // ie6 check\r\n            if (\"withCredentials\" in xhr) {\r\n                xhr.withCredentials = this.opts.withCredentials;\r\n            }\r\n            if (this.opts.requestTimeout) {\r\n                xhr.timeout = this.opts.requestTimeout;\r\n            }\r\n            xhr.onreadystatechange = () => {\r\n                if (4 !== xhr.readyState)\r\n                    return;\r\n                if (200 === xhr.status || 1223 === xhr.status) {\r\n                    this.onLoad();\r\n                }\r\n                else {\r\n                    // make sure the `error` event handler that's user-set\r\n                    // does not throw in the same tick and gets caught here\r\n                    this.setTimeoutFn(() => {\r\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\r\n                    }, 0);\r\n                }\r\n            };\r\n            xhr.send(this.data);\r\n        }\r\n        catch (e) {\r\n            // Need to defer since .create() is called directly from the constructor\r\n            // and thus the 'error' event can only be only bound *after* this exception\r\n            // occurs.  Therefore, also, we cannot throw here at all.\r\n            this.setTimeoutFn(() => {\r\n                this.onError(e);\r\n            }, 0);\r\n            return;\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            this.index = Request.requestsCount++;\r\n            Request.requests[this.index] = this;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful response.\r\n     *\r\n     * @api private\r\n     */\r\n    onSuccess() {\r\n        this.emit(\"success\");\r\n        this.cleanup();\r\n    }\r\n    /**\r\n     * Called if we have data.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        this.emit(\"data\", data);\r\n        this.onSuccess();\r\n    }\r\n    /**\r\n     * Called upon error.\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        this.emit(\"error\", err);\r\n        this.cleanup(true);\r\n    }\r\n    /**\r\n     * Cleans up house.\r\n     *\r\n     * @api private\r\n     */\r\n    cleanup(fromError) {\r\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\r\n            return;\r\n        }\r\n        this.xhr.onreadystatechange = empty;\r\n        if (fromError) {\r\n            try {\r\n                this.xhr.abort();\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            delete Request.requests[this.index];\r\n        }\r\n        this.xhr = null;\r\n    }\r\n    /**\r\n     * Called upon load.\r\n     *\r\n     * @api private\r\n     */\r\n    onLoad() {\r\n        const data = this.xhr.responseText;\r\n        if (data !== null) {\r\n            this.onData(data);\r\n        }\r\n    }\r\n    /**\r\n     * Aborts the request.\r\n     *\r\n     * @api public\r\n     */\r\n    abort() {\r\n        this.cleanup();\r\n    }\r\n}\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\nif (typeof document !== \"undefined\") {\r\n    // @ts-ignore\r\n    if (typeof attachEvent === \"function\") {\r\n        // @ts-ignore\r\n        attachEvent(\"onunload\", unloadHandler);\r\n    }\r\n    else if (typeof addEventListener === \"function\") {\r\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\r\n        addEventListener(terminationEvent, unloadHandler, false);\r\n    }\r\n}\r\nfunction unloadHandler() {\r\n    for (let i in Request.requests) {\r\n        if (Request.requests.hasOwnProperty(i)) {\r\n            Request.requests[i].abort();\r\n        }\r\n    }\r\n}\r\n", "const PACKET_TYPES = Object.create(null); // no Map = no polyfill\r\nPACKET_TYPES[\"open\"] = \"0\";\r\nPACKET_TYPES[\"close\"] = \"1\";\r\nPACKET_TYPES[\"ping\"] = \"2\";\r\nPACKET_TYPES[\"pong\"] = \"3\";\r\nPACKET_TYPES[\"message\"] = \"4\";\r\nPACKET_TYPES[\"upgrade\"] = \"5\";\r\nPACKET_TYPES[\"noop\"] = \"6\";\r\nconst PACKET_TYPES_REVERSE = Object.create(null);\r\nObject.keys(PACKET_TYPES).forEach(key => {\r\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\r\n});\r\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\r\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\r\n", "import { PACKET_TYPES } from \"./commons.js\";\r\nconst withNativeBlob = typeof Blob === \"function\" ||\r\n    (typeof Blob !== \"undefined\" &&\r\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\r\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\r\n// ArrayBuffer.isView method is not defined in IE10\r\nconst isView = obj => {\r\n    return typeof ArrayBuffer.isView === \"function\"\r\n        ? ArrayBuffer.isView(obj)\r\n        : obj && obj.buffer instanceof ArrayBuffer;\r\n};\r\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\r\n    if (withNativeBlob && data instanceof Blob) {\r\n        if (supportsBinary) {\r\n            return callback(data);\r\n        }\r\n        else {\r\n            return encodeBlobAsBase64(data, callback);\r\n        }\r\n    }\r\n    else if (withNativeArrayBuffer &&\r\n        (data instanceof ArrayBuffer || isView(data))) {\r\n        if (supportsBinary) {\r\n            return callback(data);\r\n        }\r\n        else {\r\n            return encodeBlobAsBase64(new Blob([data]), callback);\r\n        }\r\n    }\r\n    // plain string\r\n    return callback(PACKET_TYPES[type] + (data || \"\"));\r\n};\r\nconst encodeBlobAsBase64 = (data, callback) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = function () {\r\n        const content = fileReader.result.split(\",\")[1];\r\n        callback(\"b\" + content);\r\n    };\r\n    return fileReader.readAsDataURL(data);\r\n};\r\nexport default encodePacket;\r\n", null, "import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\r\nimport { decode } from \"base64-arraybuffer\";\r\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\r\nconst decodePacket = (encodedPacket, binaryType) => {\r\n    if (typeof encodedPacket !== \"string\") {\r\n        return {\r\n            type: \"message\",\r\n            data: mapBinary(encodedPacket, binaryType)\r\n        };\r\n    }\r\n    const type = encodedPacket.charAt(0);\r\n    if (type === \"b\") {\r\n        return {\r\n            type: \"message\",\r\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\r\n        };\r\n    }\r\n    const packetType = PACKET_TYPES_REVERSE[type];\r\n    if (!packetType) {\r\n        return ERROR_PACKET;\r\n    }\r\n    return encodedPacket.length > 1\r\n        ? {\r\n            type: PACKET_TYPES_REVERSE[type],\r\n            data: encodedPacket.substring(1)\r\n        }\r\n        : {\r\n            type: PACKET_TYPES_REVERSE[type]\r\n        };\r\n};\r\nconst decodeBase64Packet = (data, binaryType) => {\r\n    if (withNativeArrayBuffer) {\r\n        const decoded = decode(data);\r\n        return mapBinary(decoded, binaryType);\r\n    }\r\n    else {\r\n        return { base64: true, data }; // fallback for old browsers\r\n    }\r\n};\r\nconst mapBinary = (data, binaryType) => {\r\n    switch (binaryType) {\r\n        case \"blob\":\r\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\r\n        case \"arraybuffer\":\r\n        default:\r\n            return data; // assuming the data is already an ArrayBuffer\r\n    }\r\n};\r\nexport default decodePacket;\r\n", "import encodePacket from \"./encodePacket.js\";\r\nimport decodePacket from \"./decodePacket.js\";\r\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\r\nconst encodePayload = (packets, callback) => {\r\n    // some packets may be added to the array while encoding, so the initial length must be saved\r\n    const length = packets.length;\r\n    const encodedPackets = new Array(length);\r\n    let count = 0;\r\n    packets.forEach((packet, i) => {\r\n        // force base64 encoding for binary packets\r\n        encodePacket(packet, false, encodedPacket => {\r\n            encodedPackets[i] = encodedPacket;\r\n            if (++count === length) {\r\n                callback(encodedPackets.join(SEPARATOR));\r\n            }\r\n        });\r\n    });\r\n};\r\nconst decodePayload = (encodedPayload, binaryType) => {\r\n    const encodedPackets = encodedPayload.split(SEPARATOR);\r\n    const packets = [];\r\n    for (let i = 0; i < encodedPackets.length; i++) {\r\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\r\n        packets.push(decodedPacket);\r\n        if (decodedPacket.type === \"error\") {\r\n            break;\r\n        }\r\n    }\r\n    return packets;\r\n};\r\nexport const protocol = 4;\r\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\r\n", "import { decodePacket } from \"engine.io-parser\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { installTimerFunctions } from \"./util.js\";\r\nexport class Transport extends Emitter {\r\n    /**\r\n     * Transport abstract constructor.\r\n     *\r\n     * @param {Object} options.\r\n     * @api private\r\n     */\r\n    constructor(opts) {\r\n        super();\r\n        this.writable = false;\r\n        installTimerFunctions(this, opts);\r\n        this.opts = opts;\r\n        this.query = opts.query;\r\n        this.readyState = \"\";\r\n        this.socket = opts.socket;\r\n    }\r\n    /**\r\n     * Emits an error.\r\n     *\r\n     * @param {String} str\r\n     * @return {Transport} for chaining\r\n     * @api protected\r\n     */\r\n    onError(msg, desc) {\r\n        const err = new Error(msg);\r\n        // @ts-ignore\r\n        err.type = \"TransportError\";\r\n        // @ts-ignore\r\n        err.description = desc;\r\n        super.emit(\"error\", err);\r\n        return this;\r\n    }\r\n    /**\r\n     * Opens the transport.\r\n     *\r\n     * @api public\r\n     */\r\n    open() {\r\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\r\n            this.readyState = \"opening\";\r\n            this.doOpen();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Closes the transport.\r\n     *\r\n     * @api public\r\n     */\r\n    close() {\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.doClose();\r\n            this.onClose();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends multiple packets.\r\n     *\r\n     * @param {Array} packets\r\n     * @api public\r\n     */\r\n    send(packets) {\r\n        if (\"open\" === this.readyState) {\r\n            this.write(packets);\r\n        }\r\n        else {\r\n            // this might happen if the transport was silently closed in the beforeunload event handler\r\n        }\r\n    }\r\n    /**\r\n     * Called upon open\r\n     *\r\n     * @api protected\r\n     */\r\n    onOpen() {\r\n        this.readyState = \"open\";\r\n        this.writable = true;\r\n        super.emit(\"open\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @param {String} data\r\n     * @api protected\r\n     */\r\n    onData(data) {\r\n        const packet = decodePacket(data, this.socket.binaryType);\r\n        this.onPacket(packet);\r\n    }\r\n    /**\r\n     * Called with a decoded packet.\r\n     *\r\n     * @api protected\r\n     */\r\n    onPacket(packet) {\r\n        super.emit(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon close.\r\n     *\r\n     * @api protected\r\n     */\r\n    onClose() {\r\n        this.readyState = \"closed\";\r\n        super.emit(\"close\");\r\n    }\r\n}\r\n", "import { Transport } from \"../transport.js\";\r\nimport yeast from \"yeast\";\r\nimport parseqs from \"parseqs\";\r\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\r\nexport class Polling extends Transport {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.polling = false;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     */\r\n    get name() {\r\n        return \"polling\";\r\n    }\r\n    /**\r\n     * Opens the socket (triggers polling). We write a PING message to determine\r\n     * when the transport is open.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        this.poll();\r\n    }\r\n    /**\r\n     * Pauses polling.\r\n     *\r\n     * @param {Function} callback upon buffers are flushed and transport is paused\r\n     * @api private\r\n     */\r\n    pause(onPause) {\r\n        this.readyState = \"pausing\";\r\n        const pause = () => {\r\n            this.readyState = \"paused\";\r\n            onPause();\r\n        };\r\n        if (this.polling || !this.writable) {\r\n            let total = 0;\r\n            if (this.polling) {\r\n                total++;\r\n                this.once(\"pollComplete\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n            if (!this.writable) {\r\n                total++;\r\n                this.once(\"drain\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            pause();\r\n        }\r\n    }\r\n    /**\r\n     * Starts polling cycle.\r\n     *\r\n     * @api public\r\n     */\r\n    poll() {\r\n        this.polling = true;\r\n        this.doPoll();\r\n        this.emit(\"poll\");\r\n    }\r\n    /**\r\n     * Overloads onData to detect payloads.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        const callback = packet => {\r\n            // if its the first message we consider the transport open\r\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\r\n                this.onOpen();\r\n            }\r\n            // if its a close packet, we close the ongoing requests\r\n            if (\"close\" === packet.type) {\r\n                this.onClose();\r\n                return false;\r\n            }\r\n            // otherwise bypass onData and handle the message\r\n            this.onPacket(packet);\r\n        };\r\n        // decode payload\r\n        decodePayload(data, this.socket.binaryType).forEach(callback);\r\n        // if an event did not trigger closing\r\n        if (\"closed\" !== this.readyState) {\r\n            // if we got data we're not polling\r\n            this.polling = false;\r\n            this.emit(\"pollComplete\");\r\n            if (\"open\" === this.readyState) {\r\n                this.poll();\r\n            }\r\n            else {\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * For polling, send a close packet.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        const close = () => {\r\n            this.write([{ type: \"close\" }]);\r\n        };\r\n        if (\"open\" === this.readyState) {\r\n            close();\r\n        }\r\n        else {\r\n            // in case we're trying to close while\r\n            // handshaking is in progress (GH-164)\r\n            this.once(\"open\", close);\r\n        }\r\n    }\r\n    /**\r\n     * Writes a packets payload.\r\n     *\r\n     * @param {Array} data packets\r\n     * @param {Function} drain callback\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        encodePayload(packets, data => {\r\n            this.doWrite(data, () => {\r\n                this.writable = true;\r\n                this.emit(\"drain\");\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"https\" : \"http\";\r\n        let port = \"\";\r\n        // cache busting is forced\r\n        if (false !== this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = yeast();\r\n        }\r\n        if (!this.supportsBinary && !query.sid) {\r\n            query.b64 = 1;\r\n        }\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        const encodedQuery = parseqs.encode(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n}\r\n", "import { Transport } from \"../transport.js\";\r\nimport parseqs from \"parseqs\";\r\nimport yeast from \"yeast\";\r\nimport { pick } from \"../util.js\";\r\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\r\nimport { encodePacket } from \"engine.io-parser\";\r\n// detect ReactNative environment\r\nconst isReactNative = typeof navigator !== \"undefined\" &&\r\n    typeof navigator.product === \"string\" &&\r\n    navigator.product.toLowerCase() === \"reactnative\";\r\nexport class WS extends Transport {\r\n    /**\r\n     * WebSocket transport constructor.\r\n     *\r\n     * @api {Object} connection options\r\n     * @api public\r\n     */\r\n    constructor(opts) {\r\n        super(opts);\r\n        this.supportsBinary = !opts.forceBase64;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     *\r\n     * @api public\r\n     */\r\n    get name() {\r\n        return \"websocket\";\r\n    }\r\n    /**\r\n     * Opens socket.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        if (!this.check()) {\r\n            // let probe timeout\r\n            return;\r\n        }\r\n        const uri = this.uri();\r\n        const protocols = this.opts.protocols;\r\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\r\n        const opts = isReactNative\r\n            ? {}\r\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\r\n        if (this.opts.extraHeaders) {\r\n            opts.headers = this.opts.extraHeaders;\r\n        }\r\n        try {\r\n            this.ws =\r\n                usingBrowserWebSocket && !isReactNative\r\n                    ? protocols\r\n                        ? new WebSocket(uri, protocols)\r\n                        : new WebSocket(uri)\r\n                    : new WebSocket(uri, protocols, opts);\r\n        }\r\n        catch (err) {\r\n            return this.emit(\"error\", err);\r\n        }\r\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\r\n        this.addEventListeners();\r\n    }\r\n    /**\r\n     * Adds event listeners to the socket\r\n     *\r\n     * @api private\r\n     */\r\n    addEventListeners() {\r\n        this.ws.onopen = () => {\r\n            if (this.opts.autoUnref) {\r\n                this.ws._socket.unref();\r\n            }\r\n            this.onOpen();\r\n        };\r\n        this.ws.onclose = this.onClose.bind(this);\r\n        this.ws.onmessage = ev => this.onData(ev.data);\r\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\r\n    }\r\n    /**\r\n     * Writes data to socket.\r\n     *\r\n     * @param {Array} array of packets.\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        // encodePacket efficient as it uses WS framing\r\n        // no need for encodePayload\r\n        for (let i = 0; i < packets.length; i++) {\r\n            const packet = packets[i];\r\n            const lastPacket = i === packets.length - 1;\r\n            encodePacket(packet, this.supportsBinary, data => {\r\n                // always create a new object (GH-437)\r\n                const opts = {};\r\n                if (!usingBrowserWebSocket) {\r\n                    if (packet.options) {\r\n                        opts.compress = packet.options.compress;\r\n                    }\r\n                    if (this.opts.perMessageDeflate) {\r\n                        const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\r\n                        if (len < this.opts.perMessageDeflate.threshold) {\r\n                            opts.compress = false;\r\n                        }\r\n                    }\r\n                }\r\n                // Sometimes the websocket has already been closed but the browser didn't\r\n                // have a chance of informing us about it yet, in that case send will\r\n                // throw an error\r\n                try {\r\n                    if (usingBrowserWebSocket) {\r\n                        // TypeError is thrown when passing the second argument on Safari\r\n                        this.ws.send(data);\r\n                    }\r\n                    else {\r\n                        this.ws.send(data, opts);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                }\r\n                if (lastPacket) {\r\n                    // fake drain\r\n                    // defer to next tick to allow Socket to clear writeBuffer\r\n                    nextTick(() => {\r\n                        this.writable = true;\r\n                        this.emit(\"drain\");\r\n                    }, this.setTimeoutFn);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Closes socket.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        if (typeof this.ws !== \"undefined\") {\r\n            this.ws.close();\r\n            this.ws = null;\r\n        }\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\r\n        let port = \"\";\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        // append timestamp to URI\r\n        if (this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = yeast();\r\n        }\r\n        // communicate binary support capabilities\r\n        if (!this.supportsBinary) {\r\n            query.b64 = 1;\r\n        }\r\n        const encodedQuery = parseqs.encode(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n    /**\r\n     * Feature detection for WebSocket.\r\n     *\r\n     * @return {Boolean} whether this transport is available.\r\n     * @api public\r\n     */\r\n    check() {\r\n        return (!!WebSocket &&\r\n            !(\"__initialize\" in WebSocket && this.name === WS.prototype.name));\r\n    }\r\n}\r\n", "import globalThis from \"../globalThis.js\";\r\nexport const nextTick = (() => {\r\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\r\n    if (isPromiseAvailable) {\r\n        return cb => Promise.resolve().then(cb);\r\n    }\r\n    else {\r\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\r\n    }\r\n})();\r\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\r\nexport const usingBrowserWebSocket = true;\r\nexport const defaultBinaryType = \"arraybuffer\";\r\n", "import { XHR } from \"./polling-xhr.js\";\r\nimport { WS } from \"./websocket.js\";\r\nexport const transports = {\r\n    websocket: WS,\r\n    polling: XHR\r\n};\r\n", "import { transports } from \"./transports/index.js\";\r\nimport { installTimerFunctions } from \"./util.js\";\r\nimport parseqs from \"parseqs\";\r\nimport parseuri from \"parseuri\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { protocol } from \"engine.io-parser\";\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * Socket constructor.\r\n     *\r\n     * @param {String|Object} uri or options\r\n     * @param {Object} opts - options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts = {}) {\r\n        super();\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = null;\r\n        }\r\n        if (uri) {\r\n            uri = parseuri(uri);\r\n            opts.hostname = uri.host;\r\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n            opts.port = uri.port;\r\n            if (uri.query)\r\n                opts.query = uri.query;\r\n        }\r\n        else if (opts.host) {\r\n            opts.hostname = parseuri(opts.host).host;\r\n        }\r\n        installTimerFunctions(this, opts);\r\n        this.secure =\r\n            null != opts.secure\r\n                ? opts.secure\r\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n        if (opts.hostname && !opts.port) {\r\n            // if no port is specified manually, use the protocol default\r\n            opts.port = this.secure ? \"443\" : \"80\";\r\n        }\r\n        this.hostname =\r\n            opts.hostname ||\r\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n        this.port =\r\n            opts.port ||\r\n                (typeof location !== \"undefined\" && location.port\r\n                    ? location.port\r\n                    : this.secure\r\n                        ? \"443\"\r\n                        : \"80\");\r\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n        this.readyState = \"\";\r\n        this.writeBuffer = [];\r\n        this.prevBufferLen = 0;\r\n        this.opts = Object.assign({\r\n            path: \"/engine.io\",\r\n            agent: false,\r\n            withCredentials: false,\r\n            upgrade: true,\r\n            timestampParam: \"t\",\r\n            rememberUpgrade: false,\r\n            rejectUnauthorized: true,\r\n            perMessageDeflate: {\r\n                threshold: 1024\r\n            },\r\n            transportOptions: {},\r\n            closeOnBeforeunload: true\r\n        }, opts);\r\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n        if (typeof this.opts.query === \"string\") {\r\n            this.opts.query = parseqs.decode(this.opts.query);\r\n        }\r\n        // set on handshake\r\n        this.id = null;\r\n        this.upgrades = null;\r\n        this.pingInterval = null;\r\n        this.pingTimeout = null;\r\n        // set on heartbeat\r\n        this.pingTimeoutTimer = null;\r\n        if (typeof addEventListener === \"function\") {\r\n            if (this.opts.closeOnBeforeunload) {\r\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\r\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\r\n                // closed/reloaded)\r\n                addEventListener(\"beforeunload\", () => {\r\n                    if (this.transport) {\r\n                        // silently close the transport\r\n                        this.transport.removeAllListeners();\r\n                        this.transport.close();\r\n                    }\r\n                }, false);\r\n            }\r\n            if (this.hostname !== \"localhost\") {\r\n                this.offlineEventListener = () => {\r\n                    this.onClose(\"transport close\");\r\n                };\r\n                addEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n        }\r\n        this.open();\r\n    }\r\n    /**\r\n     * Creates transport of the given type.\r\n     *\r\n     * @param {String} transport name\r\n     * @return {Transport}\r\n     * @api private\r\n     */\r\n    createTransport(name) {\r\n        const query = clone(this.opts.query);\r\n        // append engine.io protocol identifier\r\n        query.EIO = protocol;\r\n        // transport name\r\n        query.transport = name;\r\n        // session id if we already have one\r\n        if (this.id)\r\n            query.sid = this.id;\r\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\r\n            query,\r\n            socket: this,\r\n            hostname: this.hostname,\r\n            secure: this.secure,\r\n            port: this.port\r\n        });\r\n        return new transports[name](opts);\r\n    }\r\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @api private\r\n     */\r\n    open() {\r\n        let transport;\r\n        if (this.opts.rememberUpgrade &&\r\n            Socket.priorWebsocketSuccess &&\r\n            this.transports.indexOf(\"websocket\") !== -1) {\r\n            transport = \"websocket\";\r\n        }\r\n        else if (0 === this.transports.length) {\r\n            // Emit error on next tick so it can be listened to\r\n            this.setTimeoutFn(() => {\r\n                this.emitReserved(\"error\", \"No transports available\");\r\n            }, 0);\r\n            return;\r\n        }\r\n        else {\r\n            transport = this.transports[0];\r\n        }\r\n        this.readyState = \"opening\";\r\n        // Retry with the next transport if the transport is disabled (jsonp: false)\r\n        try {\r\n            transport = this.createTransport(transport);\r\n        }\r\n        catch (e) {\r\n            this.transports.shift();\r\n            this.open();\r\n            return;\r\n        }\r\n        transport.open();\r\n        this.setTransport(transport);\r\n    }\r\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @api private\r\n     */\r\n    setTransport(transport) {\r\n        if (this.transport) {\r\n            this.transport.removeAllListeners();\r\n        }\r\n        // set up transport\r\n        this.transport = transport;\r\n        // set up transport listeners\r\n        transport\r\n            .on(\"drain\", this.onDrain.bind(this))\r\n            .on(\"packet\", this.onPacket.bind(this))\r\n            .on(\"error\", this.onError.bind(this))\r\n            .on(\"close\", () => {\r\n            this.onClose(\"transport close\");\r\n        });\r\n    }\r\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} transport name\r\n     * @api private\r\n     */\r\n    probe(name) {\r\n        let transport = this.createTransport(name);\r\n        let failed = false;\r\n        Socket.priorWebsocketSuccess = false;\r\n        const onTransportOpen = () => {\r\n            if (failed)\r\n                return;\r\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n            transport.once(\"packet\", msg => {\r\n                if (failed)\r\n                    return;\r\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n                    this.upgrading = true;\r\n                    this.emitReserved(\"upgrading\", transport);\r\n                    if (!transport)\r\n                        return;\r\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n                    this.transport.pause(() => {\r\n                        if (failed)\r\n                            return;\r\n                        if (\"closed\" === this.readyState)\r\n                            return;\r\n                        cleanup();\r\n                        this.setTransport(transport);\r\n                        transport.send([{ type: \"upgrade\" }]);\r\n                        this.emitReserved(\"upgrade\", transport);\r\n                        transport = null;\r\n                        this.upgrading = false;\r\n                        this.flush();\r\n                    });\r\n                }\r\n                else {\r\n                    const err = new Error(\"probe error\");\r\n                    // @ts-ignore\r\n                    err.transport = transport.name;\r\n                    this.emitReserved(\"upgradeError\", err);\r\n                }\r\n            });\r\n        };\r\n        function freezeTransport() {\r\n            if (failed)\r\n                return;\r\n            // Any callback called by transport should be ignored since now\r\n            failed = true;\r\n            cleanup();\r\n            transport.close();\r\n            transport = null;\r\n        }\r\n        // Handle any error that happens while probing\r\n        const onerror = err => {\r\n            const error = new Error(\"probe error: \" + err);\r\n            // @ts-ignore\r\n            error.transport = transport.name;\r\n            freezeTransport();\r\n            this.emitReserved(\"upgradeError\", error);\r\n        };\r\n        function onTransportClose() {\r\n            onerror(\"transport closed\");\r\n        }\r\n        // When the socket is closed while we're probing\r\n        function onclose() {\r\n            onerror(\"socket closed\");\r\n        }\r\n        // When the socket is upgraded while we're probing\r\n        function onupgrade(to) {\r\n            if (transport && to.name !== transport.name) {\r\n                freezeTransport();\r\n            }\r\n        }\r\n        // Remove all listeners on the transport and on self\r\n        const cleanup = () => {\r\n            transport.removeListener(\"open\", onTransportOpen);\r\n            transport.removeListener(\"error\", onerror);\r\n            transport.removeListener(\"close\", onTransportClose);\r\n            this.off(\"close\", onclose);\r\n            this.off(\"upgrading\", onupgrade);\r\n        };\r\n        transport.once(\"open\", onTransportOpen);\r\n        transport.once(\"error\", onerror);\r\n        transport.once(\"close\", onTransportClose);\r\n        this.once(\"close\", onclose);\r\n        this.once(\"upgrading\", onupgrade);\r\n        transport.open();\r\n    }\r\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @api private\r\n     */\r\n    onOpen() {\r\n        this.readyState = \"open\";\r\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n        this.emitReserved(\"open\");\r\n        this.flush();\r\n        // we check for `readyState` in case an `open`\r\n        // listener already closed the socket\r\n        if (\"open\" === this.readyState &&\r\n            this.opts.upgrade &&\r\n            this.transport.pause) {\r\n            let i = 0;\r\n            const l = this.upgrades.length;\r\n            for (; i < l; i++) {\r\n                this.probe(this.upgrades[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @api private\r\n     */\r\n    onPacket(packet) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            this.emitReserved(\"packet\", packet);\r\n            // Socket is live - any packet counts\r\n            this.emitReserved(\"heartbeat\");\r\n            switch (packet.type) {\r\n                case \"open\":\r\n                    this.onHandshake(JSON.parse(packet.data));\r\n                    break;\r\n                case \"ping\":\r\n                    this.resetPingTimeout();\r\n                    this.sendPacket(\"pong\");\r\n                    this.emitReserved(\"ping\");\r\n                    this.emitReserved(\"pong\");\r\n                    break;\r\n                case \"error\":\r\n                    const err = new Error(\"server error\");\r\n                    // @ts-ignore\r\n                    err.code = packet.data;\r\n                    this.onError(err);\r\n                    break;\r\n                case \"message\":\r\n                    this.emitReserved(\"data\", packet.data);\r\n                    this.emitReserved(\"message\", packet.data);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} data - handshake obj\r\n     * @api private\r\n     */\r\n    onHandshake(data) {\r\n        this.emitReserved(\"handshake\", data);\r\n        this.id = data.sid;\r\n        this.transport.query.sid = data.sid;\r\n        this.upgrades = this.filterUpgrades(data.upgrades);\r\n        this.pingInterval = data.pingInterval;\r\n        this.pingTimeout = data.pingTimeout;\r\n        this.onOpen();\r\n        // In case open handler closes socket\r\n        if (\"closed\" === this.readyState)\r\n            return;\r\n        this.resetPingTimeout();\r\n    }\r\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @api private\r\n     */\r\n    resetPingTimeout() {\r\n        this.clearTimeoutFn(this.pingTimeoutTimer);\r\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\r\n            this.onClose(\"ping timeout\");\r\n        }, this.pingInterval + this.pingTimeout);\r\n        if (this.opts.autoUnref) {\r\n            this.pingTimeoutTimer.unref();\r\n        }\r\n    }\r\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @api private\r\n     */\r\n    onDrain() {\r\n        this.writeBuffer.splice(0, this.prevBufferLen);\r\n        // setting prevBufferLen = 0 is very important\r\n        // for example, when upgrading, upgrade packet is sent over,\r\n        // and a nonzero prevBufferLen could cause problems on `drain`\r\n        this.prevBufferLen = 0;\r\n        if (0 === this.writeBuffer.length) {\r\n            this.emitReserved(\"drain\");\r\n        }\r\n        else {\r\n            this.flush();\r\n        }\r\n    }\r\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @api private\r\n     */\r\n    flush() {\r\n        if (\"closed\" !== this.readyState &&\r\n            this.transport.writable &&\r\n            !this.upgrading &&\r\n            this.writeBuffer.length) {\r\n            this.transport.send(this.writeBuffer);\r\n            // keep track of current length of writeBuffer\r\n            // splice writeBuffer and callbackBuffer on `drain`\r\n            this.prevBufferLen = this.writeBuffer.length;\r\n            this.emitReserved(\"flush\");\r\n        }\r\n    }\r\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} message.\r\n     * @param {Function} callback function.\r\n     * @param {Object} options.\r\n     * @return {Socket} for chaining.\r\n     * @api public\r\n     */\r\n    write(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    send(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @api private\r\n     */\r\n    sendPacket(type, data, options, fn) {\r\n        if (\"function\" === typeof data) {\r\n            fn = data;\r\n            data = undefined;\r\n        }\r\n        if (\"function\" === typeof options) {\r\n            fn = options;\r\n            options = null;\r\n        }\r\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n            return;\r\n        }\r\n        options = options || {};\r\n        options.compress = false !== options.compress;\r\n        const packet = {\r\n            type: type,\r\n            data: data,\r\n            options: options\r\n        };\r\n        this.emitReserved(\"packetCreate\", packet);\r\n        this.writeBuffer.push(packet);\r\n        if (fn)\r\n            this.once(\"flush\", fn);\r\n        this.flush();\r\n    }\r\n    /**\r\n     * Closes the connection.\r\n     *\r\n     * @api public\r\n     */\r\n    close() {\r\n        const close = () => {\r\n            this.onClose(\"forced close\");\r\n            this.transport.close();\r\n        };\r\n        const cleanupAndClose = () => {\r\n            this.off(\"upgrade\", cleanupAndClose);\r\n            this.off(\"upgradeError\", cleanupAndClose);\r\n            close();\r\n        };\r\n        const waitForUpgrade = () => {\r\n            // wait for upgrade to finish since we can't send packets while pausing a transport\r\n            this.once(\"upgrade\", cleanupAndClose);\r\n            this.once(\"upgradeError\", cleanupAndClose);\r\n        };\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.readyState = \"closing\";\r\n            if (this.writeBuffer.length) {\r\n                this.once(\"drain\", () => {\r\n                    if (this.upgrading) {\r\n                        waitForUpgrade();\r\n                    }\r\n                    else {\r\n                        close();\r\n                    }\r\n                });\r\n            }\r\n            else if (this.upgrading) {\r\n                waitForUpgrade();\r\n            }\r\n            else {\r\n                close();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        Socket.priorWebsocketSuccess = false;\r\n        this.emitReserved(\"error\", err);\r\n        this.onClose(\"transport error\", err);\r\n    }\r\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @api private\r\n     */\r\n    onClose(reason, desc) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            // clear timers\r\n            this.clearTimeoutFn(this.pingTimeoutTimer);\r\n            // stop event from firing again for transport\r\n            this.transport.removeAllListeners(\"close\");\r\n            // ensure transport won't stay open\r\n            this.transport.close();\r\n            // ignore further transport communication\r\n            this.transport.removeAllListeners();\r\n            if (typeof removeEventListener === \"function\") {\r\n                removeEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n            // set ready state\r\n            this.readyState = \"closed\";\r\n            // clear session id\r\n            this.id = null;\r\n            // emit close event\r\n            this.emitReserved(\"close\", reason, desc);\r\n            // clean buffers after, so users can still\r\n            // grab the buffers on `close` event\r\n            this.writeBuffer = [];\r\n            this.prevBufferLen = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} server upgrades\r\n     * @api private\r\n     *\r\n     */\r\n    filterUpgrades(upgrades) {\r\n        const filteredUpgrades = [];\r\n        let i = 0;\r\n        const j = upgrades.length;\r\n        for (; i < j; i++) {\r\n            if (~this.transports.indexOf(upgrades[i]))\r\n                filteredUpgrades.push(upgrades[i]);\r\n        }\r\n        return filteredUpgrades;\r\n    }\r\n}\r\nSocket.protocol = protocol;\r\nfunction clone(obj) {\r\n    const o = {};\r\n    for (let i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            o[i] = obj[i];\r\n        }\r\n    }\r\n    return o;\r\n}\r\n", "import { Socket } from \"./socket.js\";\r\nexport { Socket };\r\nexport const protocol = Socket.protocol;\r\nexport { Transport } from \"./transport.js\";\r\nexport { transports } from \"./transports/index.js\";\r\nexport { installTimerFunctions } from \"./util.js\";\r\n", "import { Emitter } from \"@socket.io/component-emitter\";\r\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\r\nimport { isBinary, hasBinary } from \"./is-binary.js\";\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport const protocol = 5;\r\nexport var PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType || (PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nexport class Encoder {\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (hasBinary(obj)) {\r\n                obj.type =\r\n                    obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK;\r\n                return this.encodeAsBinary(obj);\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data);\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nexport class Decoder extends Emitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            packet = this.decodeString(obj);\r\n            if (packet.type === PacketType.BINARY_EVENT ||\r\n                packet.type === PacketType.BINARY_ACK) {\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n        }\r\n    }\r\n}\r\nfunction tryParse(str) {\r\n    try {\r\n        return JSON.parse(str);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n", "const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\r\nconst isView = (obj) => {\r\n    return typeof ArrayBuffer.isView === \"function\"\r\n        ? ArrayBuffer.isView(obj)\r\n        : obj.buffer instanceof ArrayBuffer;\r\n};\r\nconst toString = Object.prototype.toString;\r\nconst withNativeBlob = typeof Blob === \"function\" ||\r\n    (typeof Blob !== \"undefined\" &&\r\n        toString.call(Blob) === \"[object BlobConstructor]\");\r\nconst withNativeFile = typeof File === \"function\" ||\r\n    (typeof File !== \"undefined\" &&\r\n        toString.call(File) === \"[object FileConstructor]\");\r\n/**\r\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\r\n *\r\n * @private\r\n */\r\nexport function isBinary(obj) {\r\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\r\n        (withNativeBlob && obj instanceof Blob) ||\r\n        (withNativeFile && obj instanceof File));\r\n}\r\nexport function hasBinary(obj, toJSON) {\r\n    if (!obj || typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    if (Array.isArray(obj)) {\r\n        for (let i = 0, l = obj.length; i < l; i++) {\r\n            if (hasBinary(obj[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (isBinary(obj)) {\r\n        return true;\r\n    }\r\n    if (obj.toJSON &&\r\n        typeof obj.toJSON === \"function\" &&\r\n        arguments.length === 1) {\r\n        return hasBinary(obj.toJSON(), true);\r\n    }\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n", "import { isBinary } from \"./is-binary.js\";\r\n/**\r\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @public\r\n */\r\nexport function deconstructPacket(packet) {\r\n    const buffers = [];\r\n    const packetData = packet.data;\r\n    const pack = packet;\r\n    pack.data = _deconstructPacket(packetData, buffers);\r\n    pack.attachments = buffers.length; // number of binary 'attachments'\r\n    return { packet: pack, buffers: buffers };\r\n}\r\nfunction _deconstructPacket(data, buffers) {\r\n    if (!data)\r\n        return data;\r\n    if (isBinary(data)) {\r\n        const placeholder = { _placeholder: true, num: buffers.length };\r\n        buffers.push(data);\r\n        return placeholder;\r\n    }\r\n    else if (Array.isArray(data)) {\r\n        const newData = new Array(data.length);\r\n        for (let i = 0; i < data.length; i++) {\r\n            newData[i] = _deconstructPacket(data[i], buffers);\r\n        }\r\n        return newData;\r\n    }\r\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\r\n        const newData = {};\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                newData[key] = _deconstructPacket(data[key], buffers);\r\n            }\r\n        }\r\n        return newData;\r\n    }\r\n    return data;\r\n}\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @public\r\n */\r\nexport function reconstructPacket(packet, buffers) {\r\n    packet.data = _reconstructPacket(packet.data, buffers);\r\n    packet.attachments = undefined; // no longer useful\r\n    return packet;\r\n}\r\nfunction _reconstructPacket(data, buffers) {\r\n    if (!data)\r\n        return data;\r\n    if (data && data._placeholder) {\r\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n    }\r\n    else if (Array.isArray(data)) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            data[i] = _reconstructPacket(data[i], buffers);\r\n        }\r\n    }\r\n    else if (typeof data === \"object\") {\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                data[key] = _reconstructPacket(data[key], buffers);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n", "export function on(obj, ev, fn) {\r\n    obj.on(ev, fn);\r\n    return function subDestroy() {\r\n        obj.off(ev, fn);\r\n    };\r\n}\r\n", "import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.disconnected = false;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => this.packet(packet));\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n}\r\n", "import { Socket as Engine, installTimerFunctions, } from \"engine.io-client\";\r\nimport { Socket } from \"./socket.js\";\r\nimport * as parser from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport Backoff from \"backo2\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\nexport class Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        var _a;\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        installTimerFunctions(this, opts);\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        this.engine = new Engine(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSubDestroy = on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on(socket, \"error\", (err) => {\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            this.emitReserved(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            if (timeout === 0) {\r\n                openSubDestroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = this.setTimeoutFn(() => {\r\n                openSubDestroy();\r\n                socket.close();\r\n                // @ts-ignore\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n        this.subs.push(openSubDestroy);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        this.emitReserved(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        this.emitReserved(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        this.decoder.add(data);\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        this.emitReserved(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        this.emitReserved(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const nsps = Object.keys(this.nsps);\r\n        for (const nsp of nsps) {\r\n            const socket = this.nsps[nsp];\r\n            if (socket.active) {\r\n                return;\r\n            }\r\n        }\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        this.subs.forEach((subDestroy) => subDestroy());\r\n        this.subs.length = 0;\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        this.onclose(\"forced close\");\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        this.emitReserved(\"close\", reason);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            this.backoff.reset();\r\n            this.emitReserved(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            this._reconnecting = true;\r\n            const timer = this.setTimeoutFn(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        this.emitReserved(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        this.emitReserved(\"reconnect\", attempt);\r\n    }\r\n}\r\n", "import { url } from \"./url.js\";\r\nimport { Manager } from \"./manager.js\";\r\nimport { Socket } from \"./socket.js\";\r\n/**\r\n * Managers cache.\r\n */\r\nconst cache = {};\r\nfunction lookup(uri, opts) {\r\n    if (typeof uri === \"object\") {\r\n        opts = uri;\r\n        uri = undefined;\r\n    }\r\n    opts = opts || {};\r\n    const parsed = url(uri, opts.path || \"/socket.io\");\r\n    const source = parsed.source;\r\n    const id = parsed.id;\r\n    const path = parsed.path;\r\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\r\n    const newConnection = opts.forceNew ||\r\n        opts[\"force new connection\"] ||\r\n        false === opts.multiplex ||\r\n        sameNamespace;\r\n    let io;\r\n    if (newConnection) {\r\n        io = new Manager(source, opts);\r\n    }\r\n    else {\r\n        if (!cache[id]) {\r\n            cache[id] = new Manager(source, opts);\r\n        }\r\n        io = cache[id];\r\n    }\r\n    if (parsed.query && !opts.query) {\r\n        opts.query = parsed.queryKey;\r\n    }\r\n    return io.socket(parsed.path, opts);\r\n}\r\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\r\n// namespace (e.g. `io.connect(...)`), for backward compatibility\r\nObject.assign(lookup, {\r\n    Manager,\r\n    Socket,\r\n    io: lookup,\r\n    connect: lookup,\r\n});\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport { protocol } from \"socket.io-parser\";\r\n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @public\r\n */\r\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\r\n", "import d from \"./node_modules/socket.io-client/build/esm/index.js\";export default d;\nexport * from \"./node_modules/socket.io-client/build/esm/index.js\""],
  "mappings": "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",
  "names": ["parseuri", "Emitter", "on", "decode", "yeast", "Backoff", "parseuri", "hasCORS", "import_component_emitter", "withNativeArrayBuffer", "yeast", "parseqs", "import_parseqs", "import_yeast", "yeast", "parseqs", "import_parseqs", "import_parseuri", "import_component_emitter", "parseuri", "parseqs", "protocol", "protocol", "import_component_emitter", "withNativeArrayBuffer", "isView", "withNativeBlob", "protocol", "PacketType", "import_component_emitter", "Socket", "self", "import_component_emitter", "Backoff", "self", "Socket", "socket", "lookup", "Socket", "lookup"]
}
